tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/4.0/types.yaml
  - http://www.getcloudify.org/spec/aws-plugin/1.4.4/plugin.yaml

inputs:

  key_name:
    default: basic-aws-environment-key

  private_key_path:
    default: ~/.ssh/basic-aws-environment-key.pem

  vpc_id:
    type: string

  vpc_cidr_block:
    type: string
    default: 172.16.0.0/16

  public_subnet_id:
    type: string

  public_subnet_cidr:
    type: string
    default: 172.16.122.0/24

  private_subnet_id:
    type: string

  private_subnet_cidr:
    type: string
    default: 172.16.123.0/24

  ec2_region_name:
    default: us-east-1

  ec2_region_endpoint:
    default: ec2.us-east-1.amazonaws.com

  availability_zone:
    default: us-east-1e

  security_group_name:
    type: string
    default: 'Cloud Environment Security Group'

  application_security_group_rules:
    default:
      - ip_protocol: tcp 
        cidr_ip: 0.0.0.0/0
        from_port: 22 # SSH
        to_port: 22 # SSH
      - ip_protocol: tcp 
        cidr_ip: 0.0.0.0/0
        from_port: 2379 # ETCD
        to_port: 2379 # ETCD
      - ip_protocol: tcp 
        cidr_ip: 0.0.0.0/0
        from_port: 2380 # ETCD
        to_port: 2380 # ETCD

dsl_definitions:

    aws_config: &aws_config
      aws_access_key_id: { get_secret: aws_access_key_id }
      aws_secret_access_key: { get_secret: aws_secret_access_key }
      ec2_region_name: { get_input: ec2_region_name }
      ec2_region_endpoint: { get_input: ec2_region_endpoint }

node_templates:

  application_security_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      aws_config: *aws_config
      resource_id: { get_input: security_group_name }
      description: Cloud Application Security Group
      rules: { get_input: application_security_group_rules }
    relationships:
      - type: cloudify.aws.relationships.security_group_contained_in_vpc
        target: vpc

  public_subnet:
    type: cloudify.aws.nodes.Subnet
    properties:
      aws_config: *aws_config
      use_external_resource: true
      resource_id: { get_input: public_subnet_id }
      cidr_block: { get_input: public_subnet_cidr }
      availability_zone: { get_input: availability_zone }
    relationships:
      - type: cloudify.aws.relationships.subnet_contained_in_vpc
        target: vpc

  private_subnet:
    type: cloudify.aws.nodes.Subnet
    properties:
      aws_config: *aws_config
      use_external_resource: true
      resource_id: { get_input: private_subnet_id }
      cidr_block: { get_input: private_subnet_cidr }
      availability_zone: { get_input: availability_zone }
    relationships:
      - type: cloudify.aws.relationships.subnet_contained_in_vpc
        target: vpc

  vpc:
    type: cloudify.aws.nodes.VPC
    properties:
      aws_config: *aws_config
      use_external_resource: true
      resource_id: { get_input: vpc_id }
      cidr_block: { get_input: vpc_cidr_block }

  key:
    type: cloudify.aws.nodes.KeyPair
    properties:
      aws_config: *aws_config
      resource_id: { get_input: key_name }
      private_key_path: { get_input: private_key_path }

outputs:
  public_subnet_id:
    value: { get_attribute:  [ public_subnet, aws_resource_id ] }
  private_subnet_id:
    value: { get_attribute: [ private_subnet, aws_resource_id ] }
  group_id:
    value: { get_attribute: [ application_security_group, aws_resource_id ] }
  key_path:
    value: { get_property: [ key, private_key_path ] }
  key_name:
    value: { get_property: [ key, resource_id ] }
  availability_zone:
    value: { get_input: availability_zone }
  region_name:
    value: { get_input: ec2_region_name }
  region_endpoint:
    value: { get_input: ec2_region_endpoint }
